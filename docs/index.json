[{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/c%C6%A1-b%E1%BA%A3n/","section":"tags","tags":null,"title":"Cơ Bản"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/gi%E1%BB%9Bi-thi%E1%BB%87u/","section":"tags","tags":null,"title":"Giới Thiệu"},{"body":"🐴 Chào mừng bạn đến với ThaoBlog 🎉\nĐây là bài viết đầu tiên của mình, với theme được dùng là Hugo Clarity Cho toàn bộ các trang \u0026lt;Hugo-Clarity\u0026gt;.\nDo đây là bài đầu tiên được tạo nên mình sẽ giới thiệu sơ qua về blog của mình cũng như các bài viết liên quan, cũng như lí do mình chọn các chủ đề đó và những trang blog đó chứa đựng những gì!\nMột phần lí do bài viết này có tiêu đề là Hello World cũng do từ khóa \u0026ldquo;Hello World\u0026rdquo; là linh hồn của dân IT và cũng như là lời chào đầu tiên gửi đến thế giới từ chương trình của một lập trình viên, mình thật sự rất biết ơn những người tiên phong đã tạo ra một bầu trời mới cho nền công nghệ hiện nay.\n\u0026ldquo;Hello, World!\u0026rdquo; trong lập trình bắt nguồn từ cuốn sách \u0026ldquo;A Tutorial Introduction to the Programming Language B\u0026rdquo; xuất bản năm 1973 và được Brian Kernighan sử dụng để làm ví dụ trong cuốn \u0026ldquo;The C Programming Language\u0026rdquo; năm 1978, với bối cảnh là một ví dụ đơn giản để bắt đầu một ngôn ngữ lập trình. Nó còn có cả một bộ phim hoạt hình cùng tên là \u0026ldquo;Hello World\u0026rdquo; ra mắt tại Nhật Bản vào năm 2019! :D Bối cảnh và thời gian ra đời Thời gian: Năm 1973, trong cuốn sách \u0026ldquo;A Tutorial Introduction to the Programming Language B\u0026rdquo;. Bối cảnh: Được sử dụng như một ví dụ đơn giản để giúp người học làm quen với ngôn ngữ lập trình. Người sáng lập: Ngài Brian Kernighan đã sử dụng nó làm ví dụ trong cuốn sách \u0026ldquo;The C Programming Language\u0026rdquo; xuất bản năm 1978, và từ đó nó trở thành một truyền thống, một biểu tượng lớn trong lập trình để hiển thị chương trình đầu tiên của một người với dòng \u0026ldquo;Hello, World!\u0026rdquo;. System.out.print(\u0026#34;Hello, World!\u0026#34;); Sự xuất hiện của những ý tưởng vĩ đại, làm thay đổi thời đại, luôn luôn tìm tòi và sáng tạo là những lí do chính giúp cho thế giới phát triển như bây giờ. Cùng với đó là sự ra đời của rất nhiều thuật toán, ngôn ngữ lập trình, chương trình máy tính cực kì tinh vi và phức tạp.\nNhưng tại blog này, chúng ta sẽ tập trung vào việc hiểu \u0026ldquo;Lập trình mạng máy tính\u0026rdquo; là gì bởi đây là một phần giới thiệu mở đầu!\nNếu bạn muốn tìm hiểu nhiều hơn về Brian Kernighan thì ấn vào đây!\nVậy thì lập trình mạng là gì ta hãy cùng tìm hiểu sơ qua nhé:\n\u0026ldquo;Lập trình mạng\u0026rdquo; là một lĩnh vực liên quan đến kết nối internet, xây dựng các chương trình có khả năng trao đổi dữ liệu mà trong đó một máy chủ và một máy khách có thể trao đổi dữ liệu với nhau thông qua kết nối internet hoặc mạng LAN (mạng nội bộ), nói một cách dễ hiểu hơn thì nó là sự di chuyển một dạng tín hiệu điện/quang đến một nơi rồi khi nó chạm vào một công tắc nào đó, nó lại quay về (Đây là quá trình gửi và nhận tín hiệu).\nMỗi một máy tính đều có một kết nối mạng, đó có thể là kết nối mạng nội bộ (LAN) hoặc kết nối khu vực lớn (WAN)\u0026hellip; Với những kết nối đó, thông thường chỉ có thể truyền tín hiệu trong khu vực của một tòa nhà hoặc trường học, công ty, \u0026hellip; Và khi chúng liên kết lại với nhau thì chúng lại tạo ra một kết nối khổng lồ, đó là Internet!\nTới đây chắc bạn đã hiểu cơ bản nó là gì rồi, nhưng để nắm bắt các khái niệm thì bạn phải tiếp tục xem các blog khác, hoặc tự mình tra cứu các bài viết tương tự hoặc xem video về \u0026ldquo;Lập trình mạng\u0026rdquo;.\n🐴 Tại website này có một số bài viết khác tương tự, bạn chọn thẻ giống bài viết này để dễ lọc ra nhé!\n💡 Bài tiếp theo mà bạn nên xem: Lập Trình Mạng là gì?.\n💡 Gợi ý cho bạn: Java và JavaScript là gì?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/hello-world/","section":"posts","tags":["Cơ bản","Giới thiệu","Java"],"title":"Hello World - Giới thiệu"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/java/","section":"tags","tags":null,"title":"Java"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/l%E1%BA%ADp-tr%C3%ACnh-m%E1%BA%A1ng/","section":"categories","tags":null,"title":"Lập Trình Mạng"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/","section":"","tags":null,"title":"ThaoBlog"},{"body":"\rXin chào, đây là trang giới thiệu về mình 🐴. Mình là Lê Quang Thảo, một sinh viên thuộc trường Đại học công nghệ Sài Gòn (HUTECH) Cơ sở chính mà mình đang học là tại Thủ Đức. Để mà nói thì mình cũng khá ham chơi, học cũng tạm, cũng không quá siêng năng nhưng luôn làm mọi thứ vừa sức và luôn hoàn thành những việc được giao nếu nó nằm trong khả năng của mình.\nCó thể bạn nghĩ mình hơi nghiêm túc quá, đó là do chúng ta chưa đủ thân! Vì thế đừng nghĩ nữa, mà hãy nghỉ ngơi, ăn đủ ngủ đủ, vui chơi vừa phải, biết đâu có gì đó sẽ xảy ra thì sao? (idk) Mặc dù phải đi xa để tới trường, nhưng nó cũng không quá khó khăn, mà đa số các bạn cũng đều chọn đi xa vì bạn biết đấy\u0026hellip; Thời buổi bây giờ mà ở trọ 1 mình hoặc ở ghép với người lạ cũng khá là khó khăn và không đủ độ tin cậy. Một phần cũng do giá cả bị lạm phát, gì cũng lên giá có mỗi lương là không lên được. Với những thông tin cơ bản bên trên chắc bạn cũng đoán được phần nào rằng mình là người thế nào rồi nhỉ? ~Thôi thì coi như là hiểu nhau rồi và bấm next sang trang khác để tiếp tục nha!\nHãy làm việc chăm chỉ, nhưng đừng quá chăm chỉ, hãy làm vừa đủ, vừa sức, và biết đâu là việc nên làm, đâu là việc nên tránh làm! !Gợi ý bài viết mà bạn nên xem: Hello, World!.\n","link":"https://thaoprovt1.github.io/ThaoBlog/about/","section":"","tags":null,"title":"Giới thiệu bản thân"},{"body":"Nghe “lập trình mạng” thì nhiều người sẽ nghĩ ngay tới hacker, ddos, server game hay mấy dòng lệnh đen thui gì gì đó trên màn hình. Nhưng thật ra lập trình mạng chỉ đơn giản là việc lập trình có liên quan đến giao tiếp giữa các máy tính qua mạng và việc lựa chọn ngôn ngữ lập trình phù hợp với bản thân.\nĐối với mạng, có 4 loại mạng cơ bản là: LAN, MAN, WAN, PAN. Mạng LAN (Local Area Network) Mạng LAN là mạng cục bộ nên có đường truyền ngắn. Với giao thức TCP/IP, mạng LAN chủ yếu được sử dụng tại nơi diện tích nhỏ như: văn phòng, tòa nhà, trường học.\nTất cả máy tính kết nối mạng LAN đều được sử dụng để kết nối vào máy chủ sau đó chờ quyền truy cập để thực hiện lệnh in trên máy in.\nMạng MAN (Metropolitan Area Network) Khác với mạng LAN, mạng đô thị MAN có phạm vị kết nối rộng hơn, hình thành nhờ sự kết nối nhiều mạng LAN với nhau.\nĐây là mô hình rộng cung cấp \u0026ldquo;dịch vụ giá trị gia tăng\u0026rdquo;; trên một đường truyền tốc độ nhanh để kết nối và mở rộng triển khai các doanh nghiệp với nhau.\nMạng WAN (Wide Area Network) Mạng diện rộng WAN là sự kết hợp giữa mạng LAN và mạng MAN với việc sử dụng đường dây cáp quang hay thuê bao hoặc thông qua đường truyền vệ tinh.\nPhạm vi hoạt động của mạng rộng lớn hơn, bao gồm cả một quốc gia, khu vực địa lý hay thậm chí ở toàn cầu.\nMạng PAN (Personal Area Network) Mạng PAN có khả năng phát tín hiệu kết nối trong một diện tích nhỏ để truyền dữ liệu thông qua mạng trực tuyến.\nCá nhân có thể sử dụng mạng PAN giữa các thiết bị với nhau như di động. máy tính. để liên lạc thuận lợi hơn hoặc kết nối với các mạng cao cấp hơn.\nLập trình mạng là gì? Lập trình mạng nói một cách dễ hiểu là công việc của người sẽ phát triển ứng dụng tại hệ thống doanh nghiệp từ việc lập sổ sách nhân sự, quản lý tiền cho đến việc sáng tạo các trò chơi, điều khiển để tăng sức hấp dẫn thu hút khách hàng hơn.\nCông thức để xây dựng lập trình mạng như sau:\nLập trình mạng = Kiến thức mạng + Mô hình lập trình mạng + Ngôn ngữ lập trình mạng Theo công thức này thì sẽ rất dễ nhận thấy ba vấn đề chính cần quan tâm là kiến thức mạng truyền thông, mô hình lập trình và ngôn ngữ lập trình.\nVề kiến thức mạng truyền thông thì đây là kiến thức chung về mạng di động: mạng Bluetooth, hệ thống GPS, mạng Sensor… mà người làm quản trị cần nắm vững cách sử dụng để khai thác.\nMô hình lập trình là kiến thức về tất cả các cách xây dựng hệ thống mạng, kiến thức về cơ sở dữ liệu, mô hình xây dựng các chương trình ứng dụng mạng.\nVí dụ về một số ít ngôn ngữ lập trình được ưa chuộng bởi các Dev:\nC/C++ → Dùng để viết các ứng dụng mạng ở cấp độ thấp (low-level) thân thuộc và cổ điển, ví dụ như client–server, proxy, hoặc thậm chí là giao thức mạng riêng (chi tiết thì bạn có thể tra wiki hoặc hỏi AI nhé tại vì mình cũng tham khảo thông tin từ mạng là chính 🐴).\nPython → dễ học, với nhiều thư viện hỗ trợ như socket, asyncio, requests, flask, vân vân và mây mây. Thường dùng để viết server nhanh, test API, hoặc phân tích dữ liệu mạng (cái này dễ dùng, thân thiện cho người mới học lập trình).\nVà với Java ta có thể: - Viết chat app giữa hai máy - Tạo web server nhỏ dùng socket - Làm ứng dụng client-server kiểu gửi file\u0026hellip;\nJava nổi tiếng là một ngôn ngữ mạnh mẽ và ổn định, rất phù hợp cho các ứng dụng mạng lớn. Nếu bạn muốn làm việc với mô hình client-server hoặc các kết nối TCP/IP, Java cung cấp sẵn các thư viện như java.net để xử lý.\nNgoài ra, nếu chuyển sang JavaScript (khi chạy bằng Node.js) còn cho phép ta thực hiện các tác vụ mạng ở mức gần như là “thời gian thực” (real-time) với độ trễ cực thấp, nhờ vào cơ chế bất đồng bộ (asynchronous) và event loop — thứ giúp chương trình không bị “đơ” khi chờ dữ liệu phản hồi.\nNgoài ra còn có một số ngôn ngữ lập trình khác như: .NET, Delphi,\u0026hellip;\nCó thể nói, mỗi ngôn ngữ lập trình đều có sự đặc biệt và đặc điểm riêng của chúng, nhưng để thực sự hiểu thì vẫn phải có sự rèn giũa lâu dài và cố gắn không ngừng nghỉ.\nNói ngắn gọn: Lập trình mạng = Giao tiếp qua Internet bằng code. Với mỗi ngôn ngữ lập trình là một sự giao tiếp đặc biệt riêng với máy.\nTa có ví dụ TCP Socket đơn giản sau (chạy bằng Netbeans): Code:\n//Server.js public class Server { public static void main(String[] args) { try { ServerSocket server = new ServerSocket(5000); System.out.println(\u0026#34;✅ Server đang chạy ở cổng 5000...\u0026#34;); Socket socket = server.accept(); System.out.println(\u0026#34;🟢 Client đã kết nối: \u0026#34; + socket.getInetAddress()); BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); String message; while (true) { // Nhận tin nhắn từ client if ((message = input.readLine()) != null) { System.out.println(\u0026#34;💭 Client: \u0026#34; + message); } // Gửi tin nhắn từ bàn phím System.out.print(\u0026#34;Bạn: \u0026#34;); String send = keyboard.readLine(); output.println(send); } } catch (IOException e) { e.printStackTrace(); } } } //Client.js public class Client { public static void main(String[] args) { try { // Đổi IP (127.0.0.1) này thành IP của máy \u0026#34;Server\u0026#34; trong mạng LAN Socket socket = new Socket(\u0026#34;127.0.0.1\u0026#34;, 5000); System.out.println(\u0026#34;✅ Đã kết nối tới server!\u0026#34;); BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); String message; while (true) { // Gửi tin nhắn System.out.print(\u0026#34;Bạn: \u0026#34;); String send = keyboard.readLine(); output.println(send); // Nhận tin nhắn từ server if ((message = input.readLine()) != null) { System.out.println(\u0026#34;💭 Server: \u0026#34; + message); } } } catch (IOException e) { e.printStackTrace(); } } } Và đó, chính là \u0026ldquo;Lập trình mạng máy tính\u0026rdquo;, một cách để các \u0026ldquo;máy\u0026rdquo; giao tiếp với nhau!\nLưu ý: Code trên chỉ là code nhỏ để làm mẫu, không có tính thực dụng, không nên dùng trong các công việc quan trọng.\n💡 Bài viết khác nên xem: Học lập trình mạng cần gì?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/laptrinhmanglagi/","section":"posts","tags":["Networking","Cơ bản","Java"],"title":"Lập trình mạng là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/networking/","section":"tags","tags":null,"title":"Networking"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/c%E1%BA%A3m-nh%E1%BA%ADn/","section":"tags","tags":null,"title":"Cảm Nhận"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/debug/","section":"tags","tags":null,"title":"Debug"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/%C4%91%E1%BB%8Bnh-h%C6%B0%E1%BB%9Bng-ngh%E1%BB%81-nghi%E1%BB%87p/","section":"categories","tags":null,"title":"Định Hướng Nghề Nghiệp"},{"body":"Nhiều bạn khi mới bắt đầu học lập trình mạng hoặc chỉ mới bắt đầu lập trình thường sẽ nghĩ “học lập trình nên bắt đầu bằng gì?” hay \u0026ldquo;nên học ngôn ngữ lập trình nào trước?\u0026rdquo;.\nThật ra ngôn ngữ nào cũng được, quan trọng là bạn hiểu được cách máy tính giao tiếp với nhau.\nNhưng dĩ nhiên là mình cũng không khuyến khích học cùng lúc nhiều ngôn ngữ hoặc cố lập trình và học tất cả các ngôn ngữ lập trình.\nThay vào đó bạn có thể học một số ngôn ngữ lập trình phổ biến sau:\nPython: Dễ học, có thư viện socket, requests. Cực kì khuyến khích, nếu bạn chỉ mới học lập trình và muốn tìm hướng đi sau này thì đây là một lựa chọn không tồi. C/C++: Mạnh mẽ, học sâu về tầng thấp. Khuyến khích khi bạn đã nắm được cơ bản về lập trình, hiểu được cách giao tiếp với máy qua các lệnh. Java: Nhiều framework hỗ trợ networking. Go: Hiệu năng cao, dùng nhiều cho server. Ngoài những hiểu biết về mạng và lập trình mạng cũng như ngôn ngữ lập trình. Hiện nay khi học lập trình, các con dân IT cũng thường sử dụng ngôn ngữ lập trình NET. Ngôn ngữ lập trình của NET là tập hợp các lớp dùng để lập trình online thuộc không gian System.net và System.net Socket. Các lớp này hỗ trợ tất cả mọi thứ từ lập trình đến tạo địa chỉ TCP/IP.\nMạng cục bộ LAN được các nhà lập trình tương lai xây dựng và phát triển các máy tính để kết nối tại các khu vực nhỏ như hộ gia đình hay toà nhà.\nNgoài ra lập trình mạng còn có dịch vụ web HTML, được thông qua từ HTTP. Hai không gian này đều có nền tảng hay networking cấp cao. Không chỉ vậy, lập trình mạng cũng cần tới nền Socket khi đây là giao diện trực tuyến, thông qua đó lập trình điều khiển 2 máy với nhau, gửi nhận dữ liệu giữa 2 máy.\nTham gia khóa học lập trình tại khoa Công nghệ thông tin của trường Đại học HUTECH với đa dạng các ngành và chuyên ngành! Bài viết kế tiếp mà bạn nên xem: TCP và UDP\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/ngonngucanthiet/","section":"posts","tags":["Ngôn ngữ lập trình","Java","JavaScript"],"title":"Học lập trình mạng cần gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/h%E1%BB%8Dc-t%E1%BA%ADp/","section":"categories","tags":null,"title":"Học Tập"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/h%E1%BB%8Dc-t%E1%BA%ADp/","section":"tags","tags":null,"title":"Học Tập"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/javascript/","section":"tags","tags":null,"title":"JavaScript"},{"body":"Một vài lỗi “kinh điển” ai học lập trình mạng cũng từng gặp qua ít nhất 1 lần:\nSai địa chỉ IP hoặc port. Quên ngắt kết nối server (Server.java) sau khi chạy thử xong rồi tiếp tục code, sau khi sửa code server lại tiếp tục nhấn chạy để bị báo lỗi. Quên encode/decode khi truyền chuỗi. Lỗi nhỏ (như sai chính tả), nhưng khi hỏi chatGPT thì nó sửa gần hết code. 😤 Giải pháp của người từng trải:\nIn log cho từng quá trình truyền/gửi dữ liệu, nếu bạn đủ kiên nhẫn, hãy in log cho cả những lần server/client được kết nối hay ngắt kết nối. Dùng Wireshark hoặc netcat để kiểm tra. Bình tĩnh, không hoảng lọn Cứ debug bình thường, thêm con dấu debug cho mỗi dòng mà nó bị delay tại đó hoặc code bị đóng băng, để dễ dàng ghi nhớ những dòng bị lỗi và tìm ra giải pháp. Tạo một file mới, copy code vào và kiểm thử, nếu code vẫn lỗi mà bạn không biết nó lỗi ở đâu, có thể thử cách 4 và 1. Quá trình debug vẫn là cái gì đó rất khó nếu bạn không đủ kiên nhẫn và bình tĩnh, khi code bạn nên tập trung vào từng chữ mà mình gõ, hoặc rèn luyện khả năng quan sát của bạn. Mình khuyến khích nên chơi các trò chơi như Sudoku để tăng khả năng quan sát, cũng như tốc độ và khả năng xử lý tình huống.\nCode không phải là học ngày một ngày hai là có thể như các tay lão luyện, viết mà không cần nhìn đâu! Nó là cả một quá trình gian nan, đầy thử thách khi mà những lỗi không rõ nguồn gốc sẽ liên tục xuất hiện nếu bạn lơ là dù chỉ một chút khi viết code. Thậm chí khi copy-paste code cũng có thể xuất hiện lỗi, vì thế hãy luôn giữ cho mình một cái đầu lạnh và bình tĩnh xử lý mọi thứ!\nTóm lại: Giữ tỉnh táo, kiên nhẫn xử lý tình huống thì mọi chuyện sẽ đâu ra đó, dù là hơi tốn nhiều thời gian hơn so với những người khác đi nữa. 💡 Bài viết khác mà bạn nên xem: Tại sao lại khó?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/loithuonggap/","section":"posts","tags":["Lỗi","Debug","Java"],"title":"Khi lập trình mạng, lỗi hay gặp nhất là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/kinh-nghi%E1%BB%87m/","section":"tags","tags":null,"title":"Kinh Nghiệm"},{"body":"Thật ra, khó hay dễ còn tùy thuộc vào mỗi người. Lập trình mạng không “khó” theo kiểu toán cao cấp, mà nó phức tạp vì có nhiều thứ phải hiểu cùng lúc như:\nCách thức hoạt động của socket, IP, port. Các Giao thức như TCP, UDP, HTTP. Và đặc biệt là debug lỗi cực kỳ khó chịu! Nhưng nếu bạn từng viết/làm web, game online, hay ứng dụng chat, thì bạn đang làm lập trình mạng rồi đó!\nNó chỉ khó nếu mình chưa đủ cố gắng thôi!\nĐể mà nói thì nó gần như là multi-tasking, bạn phải làm cùng lúc nhiều thứ và kiểm thử để đảm bảo không có sai sót gì, bởi nếu một khi có sai sót thì rất khó để xử lý.\nNhưng đời mà, có khó thì mới hưởng thụ được thành quả! Nếu dễ quá thì lại đâm ra chán.\nVà dĩ nhiên là nó cũng có thể phân cấp theo độ khó rồi! Cấp độ cơ bản – Giao tiếp giữa client và server: Hiểu khái niệm socket, IP, port, TCP/UDP, request-response là đủ để viết một app nhỏ rồi đó! Cấp trung - Quản lý đa kết nối, debug lỗi mạng: Khi có nhiều client hơn, sẽ có nhiều thứ phải xử lý hơn, cũng có nhiều lỗi hơn. Cấp độ này đòi hỏi phải có tư duy hệ thống, kiến thức vững chắc. Nâng cao - Có thể dựng được giao thức/hệ thống phân tán: Ở cấp độ này thì việc tạo giao thức riêng, dựng server được rồi. Đạt được mức này thì đã có thể nói là chuyên gia rồi, kiến thức về TCP/IP, routing, mã hóa (SSL/TLS), \u0026hellip; chắc chắn không ít! Master - Cấp độ cao thủ: Nắm bắt được gần như là tất cả các khái niệm, dễ dàng tạo giao thức riêng, kiến thức cực kì nhiều, chính là cao thủ võ lâm trong truyền thuyết! =\u0026gt; Bài viết mà bạn có thể thích: Tổng quan về Socket.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaolaikho/","section":"posts","tags":["Học tập","Cảm nhận","Cơ bản","Sinh viên"],"title":"Lập trình mạng có khó không? Tại sao?"},{"body":"Trong hệ thống mạng máy tính tồn tại những mô hình tham chiếu có kiến trúc phần tầng (OSI, TCP/IP…) nhằm hỗ trợ chức năng trao đôi thông tin giữa các ứng dụng ở nhiều máy tính khác nhau. Trong đó Socket giống như “đường dây” giữa hai chương trình để gửi và nhận dữ liệu.\nDữ liệu bên gửi sẽ được đóng gói (Encapsulation) từ tầng trên đến tầng cuối là tầng vật lí (Physical Layer), sau đó nhờ tầng vật lí này chuyển dữ liệu đến tầng vật lí máy bên nhận, bên nhận tiến hành giải mã (decapsulation) gói dữ kiện từ tầng dưới lên tầng trên cùng, là tầng ứng dụng (application layer).\nĐể đóng gói (Encapsulation) thông thường, người ta sẽ khai báo các biến là riêng tư (private), chủ yếu để hạn chế truy cập dữ liệu từ ngoài lớp (class). Rồi cung cấp các phương thức getter và setter (phương thức trung gian) cho phép truy cập dữ liệu. Với việc triển khai xác thực dữ liệu, người ta sẽ đảm tính toàn vẹn của dữ liệu bằng cách xác thực trước khi gán dữ liệu vào các thuộc tính của đối tượng (Object).\nVí dụ:\nClient (máy người dùng) gửi tin nhắn (đã được đóng gói). Server nhận tin, xử lý (giải mã), rồi phản hồi lại. Bạn muốn xem code mẫu? Ấn vào đây!.\nVậy thì tại sao lại phải đóng gói dữ liệu? Việc ẩn dữ liệu để tránh bị rò rỉ là một việc hết sức quan trọng, chỉ với việc một chút thông tin cực nhỏ bị rò rỉ, có thể bị kẻ xấu lợi dụng để truy cập trái phép và gây ra thiệt hại nghiêm trọng. Vì thế việc bảo vệ này nhằm đảm bảo tính toàn vẹn của dữ liệu và giúp ta tránh được những hậu quả không mong muốn. Nếu bạn bỏ qua bộ điều chỉnh quyền truy cập (riêng tư, được bảo vệ hoặc công khai), Java sẽ áp dụng bộ điều chỉnh quyền truy cập mặc định. //Phương thức Mặc định class MyClass { int myVariable; //Khai báo biến theo mặc định void myMethod() { System.out.println(\u0026#34;This is a default method\u0026#34;); } } Từ khóa \u0026ldquo;private\u0026rdquo; khai báo các biến chỉ có thể truy cập được trong lớp (class) được khai báo. Các lớp khác trong cùng chương trình không thể truy cập các phương thức hoặc biến dữ liệu private này. Các lớp và giao diện không thể là private. class Shape { protected double area; // Protected area public Shape(double area) { this.area = area; } public double getArea() { return area; } } class Circle extends Shape { private double radius; public Circle(double radius) { super(Math.PI * radius * radius); // Calling parent constructor this.radius = radius; } } Đối với biến công khai, từ khóa \u0026ldquo;public\u0026rdquo; có phạm vi rộng nhất và có thể được truy cập từ bất kỳ đâu trong code, gần như không có giới hạn nào cả! //Public nè public class Rectangle { public double width; // Public width public double height; // Public height public Rectangle(double width, double height) { this.width = width; this.height = height; } public double calculateArea() { return width * height; } } Ví dụ: Đóng gói trong Java public class Person { private String name; private int age; // Constructor public Person(String name, int age) { this.name = name; this.age = age; } // Getters public String getName() { return name; } public int getAge() { return age; } // Setters public void setName(String name) { this.name = name; } public void setAge(int age) { if (age \u0026gt;= 0) { this.age = age; } else { System.out.println(\u0026#34;Invalid age\u0026#34;); } } } Trong ví dụ trên, chúng ta đã khai báo hai biến riêng tư: name và age. Các phương thức getter công khai getName và getAge được sử dụng để truy cập các giá trị của name và age tương ứng. SetName và setAge là các phương thức setter công khai sửa đổi các biến name và age tương ứng.\nTóm lại: Đóng gói là một trong những khái niệm cốt lõi trong lập trình hướng đối tượng và mô tả việc đóng gói dữ liệu và phương thức hoạt động trên dữ liệu này thành một đơn vị.\nBài viết khác mà bạn có thể thích: TCP và UDP khác nhau như thế nào?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/whatissocket/","section":"posts","tags":["Socket","Cơ bản"],"title":"Lập trình socket là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/l%E1%BB%97i/","section":"tags","tags":null,"title":"Lỗi"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/ng%C3%B4n-ng%E1%BB%AF-l%E1%BA%ADp-tr%C3%ACnh/","section":"tags","tags":null,"title":"Ngôn Ngữ Lập Trình"},{"body":"Khi mới học, mình từng mắc mấy lỗi “ngớ ngẩn” sau 😅:\nCố học lý thuyết mà không thực hành. Không chịu đọc log khi lỗi. Copy code trên mạng mà không hiểu. Quên mất “mạng có độ trễ”! Học lập trình mạng phải test thực tế:\nChạy server, mở client, quan sát kết nối, xem log, phân tích.\nChỉ có thực hành mới hiểu được cách dữ liệu “chạy” qua mạng.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/sailamcuanguoimoihoclaptrinhmang/","section":"posts","tags":["Networking","Kinh nghiệm"],"title":"Những sai lầm khi mới học lập trình mạng"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/sinh-vi%C3%AAn/","section":"tags","tags":null,"title":"Sinh Viên"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/socket/","section":"tags","tags":null,"title":"Socket"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/tcp/","section":"tags","tags":null,"title":"TCP"},{"body":"\nGiao thức TCP (Tranmission Control Protocol) là gì? TCP là một giao thức mạng được dùng trong việc truyền gửi dữ liệu từ một mạng này đến một mạng khác. Một giao thức trong phạm vi mạng bao gồm những quy tắc và thứ tự quản lý quá trình truyền dữ liệu sao cho người dùng trên toàn cầu dù ở đâu, trên nền tảng gì, phần mềm nào cũng đều được phép thao tác theo cùng một phương thức tương tự nhau thì được gọi là TCP.\nCùng một phương thức giao tiếp = TCP\nThường thì TCP sẽ liên kết với giao thức Internet (Internet Protocal hay IP) tạo thành một cặp gọi là TCP/IP. Thuật ngữ này hay xuất hiện ở mục network setting trên máy tính hay các thiết bị di động cá nhân (Network Settings). IP có nhiệm vụ gán địa chỉ thực hiện đưa những gói tin từ nguồn đến đích, còn TCP xác thực tính tin cậy của truyền dẫn. Giao thức UDP (User Datagram Protocol) là gì? UDP được định nghĩa là giao thức dữ liệu người dùng, đây là giao thức giao tiếp thay thế cho giao thức mạng truyền dữ liệu TCP, UDP được áp dụng vào việc tùy chỉnh, cài đặt những kết nối có độ trễ thấp và không chịu lỗi giữa các ứng dụng ở môi trường internet.\nƯu và nhược điểm của TCP Ưu điểm Nhược Điểm - Hỗ trợ cài đặt kết nối các loại máy tính khác nhau. TCP sẽ không bao giờ dừng lại quá trình truyền tin mà không yêu cầu chi tiết tất cả dữ liệu đang chuyển động. Vận hành riêng biệt với hệ điều hành. Người dùng cũng không thể dùng để truyền phát hay truyền đa hướng. Hỗ trợ đa dạng giao thức định tuyến. Người dùng cần phải tạo ranh giới riêng cho mình vì TCP không có ranh giới khối. Giúp Internet và các tổ chức kết nối với nhau. Có một số tính năng mà người dùng không mong muốn từ TCP. Những tính năng này gây lãng phí băng thông, chiếm thời gian hoặc tốn công. Với kiến ​​trúc client-server mô hình TCP/IP dễ dàng nâng cao. Mô hình hóa lớp truyền tải không chịu trách nhiệm việc phân phối các gói tin. Vận hành độc lập. Việc thế chỗ giao thức trong TCP/IP rất khó khăn. TCP được áp dụng vào việc thiết lập kết nối giữa hai máy tính với nhau. Không cung cấp sự minh bạch với các dịch vụ, giao diện và giao thức của nó. Ưu và nhược điểm của UDP Ưu điểm Nhược điểm Không giới hạn bạn với một mô hình giao tiếp dựa trên kết nối. Chính vì thế mà độ trễ khởi động của các ứng dụng phân tán thấp. Với UDP, trên cùng một gói tin có khả năng sẽ không được phân phối hoặc phân phối lần hai. Quá trình truyền sẽ không được diễn ra theo thứ tự. Chúng không được quản lý bởi người nhận, nó bao gồm các ranh giới khối. Trong trường hợp xảy ra xung đột thì các router sẽ không thực hiện truyền lại lần nữa. UDP có thể truyền phát và truyền đa hướng. UDP không tích hợp Congestion Control và tính năng kiểm soát luồng, vì thế ứng dụng người dùng sẽ đảm nhiệm việc triển khai. Có thể diễn ra việc mất dữ liệu. Tình trạng bị mất gói nghiêm trọng hơn thường xuyên xảy ra tại UDP. Giao dịch nhỏ (DNS lookup). Xin hết Ứng dụng chuyên dụng về băng thông cho phép hiện tượng mất gói. =\u0026gt; TCP và UDP đều là những giao thức để gửi dữ liệu hay các gói tin qua mạng, nhưng cách hoạt động thì khác nhau hoàn toàn.\nTóm lại:\nCần chính xác → dùng TCP Cần tốc độ → dùng UDP 💡 Bài viết khác nên xem: Lỗi thường gặp?. 💡 Gợi ý cho bạn: Java và JavaScript là gì?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/tcpvaudplagi/","section":"posts","tags":["TCP","UDP"],"title":"TCP và UDP khác nhau như thế nào?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/udp/","section":"tags","tags":null,"title":"UDP"},{"body":"Ai học lập trình rồi chắc đều từng bị cái này 😭\nChạy chương trình không báo lỗi, nhưng kết quả sai bét.\nNguyên nhân?\n=\u0026gt; Logic của mình sai.\n=\u0026gt; Mình hiểu sai yêu cầu.\n=\u0026gt; Hoặc “não mình lag tạm thời”.\nKinh nghiệm rút ra:\n“Code chạy được chưa chắc đúng. Hãy hiểu rõ vì sao nó chạy được.”\nĐó là lý do học lập trình không chỉ là “gõ code”, mà còn là rèn tư duy logic.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaolaisai/","section":"posts","tags":["Lỗi","Debug"],"title":"Vấn đề muôn thuở: Code đúng, logic sai!"},{"body":"Tổng Quan Hiện nay, việc tạo một dự án Java (Java application) mà không cần phải tốn quá nhiều công sức để viết từng dòng lệnh để có được một giao diện đẹp mắt, dễ dùng là một điều quá đỗi dễ dàng nếu so sánh với trước kia.\nĐể tạo ra những ứng dụng cho phép dễ dàng tạo và chỉnh sửa front-end, thì quá trình tạo ra nó sẽ khó như thế nào?\nĐầu tiên thì, ta hãy cùng tìm hiểu sơ qua về Java! Java là ngôn ngữ lập trình đa nền tảng (cross-platform), được phát triển bởi James Gosling tại Sun Microsystems (nay là Oracle Corporation). Ngôn ngữ lập trình này ra đời vào năm 1995 và được thiết kế để có thể chạy trên các nền tảng khác nhau, từ máy tính cá nhân đến thiết bị di động, các máy chủ và thiết bị nhúng.\nJava sử dụng cấu trúc lập trình hướng đối tượng (object-oriented programming - OOP) và được xây dựng trên cơ sở của ngôn ngữ lập trình C++. Nó cung cấp một môi trường chạy ảo (virtual machine) gọi là Java Virtual Machine (JVM), giúp các chương trình Java có thể chạy trên nhiều nền tảng khác nhau mà không cần phải biên dịch lại.\nHiện tại, Java là một trong những ngôn ngữ lập trình phổ biến nhất hiện nay, được sử dụng rộng rãi trong các ứng dụng di động, phát triển web, lập trình trên các thiết bị nhúng, máy tính cá nhân, máy chủ, game và nhiều lĩnh vực khác.\nĐể tìm hiểu thêm về Java, \u0026raquo;ấn vào đây!\u0026laquo;\nCác tính năng của Java Đa nền tảng Java được thiết kế để có thể chạy trên nhiều nền tảng khác nhau, vì vậy nó rất phù hợp cho việc phát triển các ứng dụng đa nền tảng. Java sử dụng một máy ảo (JVM - Java Virtual Machine) để chạy mã nguồn, vì vậy mã nguồn được viết một lần và có thể chạy trên nhiều hệ điều hành khác nhau mà không cần thay đổi.\nQuản lý bộ nhớ tự động Java có tính năng tự động quản lý bộ nhớ, tức là nó tự động thu dọn các vùng nhớ không sử dụng nữa để giảm thiểu các lỗi bộ nhớ. Điều này giúp cho các ứng dụng được viết bằng Java có thể chạy ổn định và tránh các lỗi liên quan đến bộ nhớ.\nHỗ trợ đa luồng Java có thể xử lý đa luồng, cho phép chương trình thực hiện nhiều tác vụ cùng một lúc. Điều này giúp cho các ứng dụng có thể chạy nhanh và hiệu quả hơn, đặc biệt là khi phải xử lý nhiều tác vụ cùng một lúc.\nVề front-end và quá trình tạo ra các ứng dụng hỗ trợ thiết kế nó Việc tạo ra các ứng dụng cho phép ta dễ dàng tạo và chỉnh sửa front-end (giao diện người dùng) là một quá trình phức tạp, đòi hỏi nhiều kỹ năng và công sức, đặc biệt là vì: sự thay đổi liên tục của công nghệ, yêu cầu hỗ trợ nhiều trình duyệt và thiết bị khác nhau, cùng với việc phải xây dựng một hệ thống giao diện trực quan, linh hoạt và có tính năng mạnh mẽ để cạnh tranh trong cùng ngành.\nVề các thách thức, khó khăn trong sự phát triển Sự phức tạp của công nghệ: Lập trình front-end đòi hỏi kiến thức chuyên sâu về nhiều ngôn ngữ và framework khác nhau như HTML, CSS, JavaScript, React, Vue.js, Angular. Hỗ trợ đa trình duyệt và thiết bị: Các ứng dụng cần phải tương thích và hoạt động mượt mà trên nhiều trình duyệt web (Chrome, Firefox, Safari) và các thiết bị khác nhau (máy tính, điện thoại, máy tính bảng), điều này tạo ra nhiều vấn đề tương thích và khó khăn trong việc kiểm tra. Thay đổi công nghệ liên tục: Lĩnh vực front-end thay đổi rất nhanh. Để tạo ra một ứng dụng dễ sử dụng, nhà phát triển phải liên tục cập nhật các công nghệ mới, các công cụ và kỹ thuật mới, và thậm chí phải xây dựng lại hệ thống để tương thích với các phiên bản mới nhất của framework hoặc thư viện. Yêu cầu về trải nghiệm người dùng: Ứng dụng cần có giao diện người dùng trực quan, dễ sử dụng và mạnh mẽ. Để làm được điều này, nhà phát triển cần có kỹ năng thiết kế và tư duy thẩm mỹ tốt, cũng như phải hiểu rõ cách người dùng tương tác với ứng dụng. Xây dựng hệ thống quản lý linh hoạt: Việc tạo ra một hệ thống có khả năng cho phép người dùng dễ dàng tạo và chỉnh sửa giao diện đòi hỏi nhà phát triển phải xây dựng các thành phần linh hoạt, có thể tái sử dụng, và có các công cụ quản lý mạnh mẽ để hỗ trợ người dùng thực hiện các tác vụ phức tạp một cách đơn giản. Với những thách thức mới, liên tục đến từ mọi phía, có thể nói việc tạo ra những ứng dụng hỗ trợ là một việc tạo lập theo chu kỳ.\nJavaScript JavaScript, theo phiên bản hiện hành, là một ngôn ngữ lập trình được phát triển từ các ý niệm nguyên mẫu. Ngôn ngữ này được dùng rộng rãi cho các trang web (phía người dùng) cũng như phía máy chủ (với Nodejs). Nó vốn được phát triển bởi Brendan Eich tại Hãng truyền thông Netscape với cái tên đầu tiên Mocha, rồi sau đó đổi tên thành LiveScript, và cuối cùng thành JavaScript. Giống Java, JavaScript có cú pháp tương tự C, nhưng nó gần với Self hơn Java. .js là phần mở rộng thường được dùng cho tập tin mã nguồn JavaScript.\nJava, JavaScript và JScript:\nCùng thời điểm Netscape bắt đầu sử dụng Java trên trình duyệt Netscape, LiveScript đã được đổi tên thành JavaScript để được chú ý hơn bởi ngôn ngữ lập trình Java lúc đó đang được coi là một hiện tượng. JavaScript được bổ sung vào trình duyệt Netscape bắt đầu từ phiên bản 2.0b3 của trình duyệt này vào tháng 12 năm 1995. Trên thực tế, JavaScript không được phát triển dựa từ Java. Do đó JavaScript chỉ dựa trên các cách đặt tên của Java. Java Script gồm 2 mảng là client-server thực hiện lệnh trên máy của end-user và web-server. Về cơ bản, Java, JavaScript hay JScript là những ngôn ngữ gần giống nhau nhưng lại khác nhau về bản chất, từ cái này mở rộng ra cái kia. Mỗi ứng dụng này đều cung cấp mô hình đối tượng riêng cho phép tương tác với môi trường chủ, với phần lõi là ngôn ngữ lập trình JavaScript gần như giống nhau.\nƯu \u0026amp; nhược điểm của Java Ưu điểm Nhược điểm Độ tin cậy cao Tốc độ chậm Tính đa nền tảng Tuy chạy được trên nhiều nền tảng, nhưng có thể cần đến một trình biên dịch hoặc máy ảo Java riêng biệt để có thể chạy trên các thiết bị di động. Quản lý bộ nhớ tự động Sử dụng bộ nhớ lớn hơn so với một số ngôn ngữ lập trình khác. Công cụ phát triển phong phú Cú pháp phức tạp hơn so với một số ngôn ngữ lập trình khác Hỗ trợ đa luồng Ưu \u0026amp; nhược điểm của JavaScript Ưu điểm Nhược điểm Ít tương tác với máy chủ hơn Dễ bị khai thác, chèn mã độc Khả năng phản hồi nhanh chóng Hạn chế trên một số trình duyệt Tạo trang web giàu tính tương tác Hiển thị khác nhau trên các thiết bị khác nhau Giao diện phát triển phong phú Java có tính chặt chẽ hơn trong khi JavaScript thì dựa trên nguyên mẫu và linh hoạt hơn! Kết luận: Java và JavaScript khác nhau ở vai trò \u0026amp; cách thức hoạt động. Java thì đa năng, hướng đối tượng, biên dịch để tạo các ứng dụng lớn trên nhiều nền tảng. JavaScript thì là ngôn ngữ kịch bản, thường được dùng để tạo nội dung động và tương tác trên các trang web (Client-side).\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/webjava/","section":"posts","tags":["Java","JavaScript","Giới thiệu","Cảm nhận"],"title":"Về Java \u0026 JavaScript"},{"body":"Học lập trình mạng giúp bạn hiểu cách Internet hoạt động — nền tảng cho mọi ứng dụng hiện nay.\nKhi hiểu rõ:\nCách request/response hoạt động. Cách dữ liệu truyền qua TCP/IP. Cách server xử lý client. Thì bạn làm web, game, IoT, cloud đều dễ hơn.\nVà quan trọng hơn:\nBạn sẽ không “sợ mạng”, mà biết cách tận dụng nó cho sản phẩm của mình 💪\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaonenhoclaptrinhmangtusom/","section":"posts","tags":["Networking","Sinh viên"],"title":"Vì sao nên học lập trình mạng sớm?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/posts/javascriptgigido/","section":"posts","tags":null,"title":""}]