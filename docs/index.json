[{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/c%C6%A1-b%E1%BA%A3n/","section":"tags","tags":null,"title":"Cơ Bản"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/gi%E1%BB%9Bi-thi%E1%BB%87u/","section":"tags","tags":null,"title":"Giới Thiệu"},{"body":"🐴 Chào mừng bạn đến với ThaoBlog 🎉\nĐây là bài viết đầu tiên của mình, với theme được dùng là Hugo Clarity Cho toàn bộ các trang \u0026lt;Hugo-Clarity\u0026gt;.\nDo đây là bài đầu tiên được tạo nên mình sẽ giới thiệu sơ qua về blog của mình cũng như các bài viết liên quan, cũng như lí do mình chọn các chủ đề đó và những trang blog đó chứa đựng những gì!\nMột phần lí do bài viết này có tiêu đề là Hello World cũng do từ khóa \u0026ldquo;Hello World\u0026rdquo; là linh hồn của dân IT và cũng như là lời chào đầu tiên gửi đến thế giới từ chương trình của một lập trình viên, mình thật sự rất biết ơn những người tiên phong đã tạo ra một bầu trời mới cho nền công nghệ hiện nay.\n\u0026ldquo;Hello, World!\u0026rdquo; trong lập trình bắt nguồn từ cuốn sách \u0026ldquo;A Tutorial Introduction to the Programming Language B\u0026rdquo; xuất bản năm 1973 và được Brian Kernighan sử dụng để làm ví dụ trong cuốn \u0026ldquo;The C Programming Language\u0026rdquo; năm 1978, với bối cảnh là một ví dụ đơn giản để bắt đầu một ngôn ngữ lập trình. Nó còn có cả một bộ phim hoạt hình cùng tên là \u0026ldquo;Hello World\u0026rdquo; ra mắt tại Nhật Bản vào năm 2019! :D Bối cảnh và thời gian ra đời Thời gian: Năm 1973, trong cuốn sách \u0026ldquo;A Tutorial Introduction to the Programming Language B\u0026rdquo;. Bối cảnh: Được sử dụng như một ví dụ đơn giản để giúp người học làm quen với ngôn ngữ lập trình. Người sáng lập: Ngài Brian Kernighan đã sử dụng nó làm ví dụ trong cuốn sách \u0026ldquo;The C Programming Language\u0026rdquo; xuất bản năm 1978, và từ đó nó trở thành một truyền thống, một biểu tượng lớn trong lập trình để hiển thị chương trình đầu tiên của một người với dòng \u0026ldquo;Hello, World!\u0026rdquo;. System.out.print(\u0026#34;Hello, World!\u0026#34;); Sự xuất hiện của những ý tưởng vĩ đại, làm thay đổi thời đại, luôn luôn tìm tòi và sáng tạo là những lí do chính giúp cho thế giới phát triển như bây giờ. Cùng với đó là sự ra đời của rất nhiều thuật toán, ngôn ngữ lập trình, chương trình máy tính cực kì tinh vi và phức tạp.\nNhưng tại blog này, chúng ta sẽ tập trung vào việc hiểu \u0026ldquo;Lập trình mạng máy tính\u0026rdquo; là gì bởi đây là một phần giới thiệu mở đầu!\nVậy thì lập trình mạng là gì ta hãy cùng tìm hiểu sơ qua nhé:\n\u0026ldquo;Lập trình mạng\u0026rdquo; là một lĩnh vực liên quan đến kết nối internet, xây dựng các chương trình có khả năng trao đổi dữ liệu mà trong đó một máy chủ và một máy khách có thể trao đổi dữ liệu với nhau thông qua kết nối internet hoặc mạng LAN (mạng nội bộ), nói một cách dễ hiểu hơn thì nó là sự di chuyển một dạng tín hiệu điện/quang đến một nơi rồi khi nó chạm vào một công tắc nào đó, nó lại quay về (Đây là quá trình gửi và nhận tín hiệu).\nMỗi một máy tính đều có một kết nối mạng, đó có thể là kết nối mạng nội bộ (LAN) hoặc kết nối khu vực lớn (WAN)\u0026hellip; Với những kết nối đó, thông thường chỉ có thể truyền tín hiệu trong khu vực của một tòa nhà hoặc trường học, công ty, \u0026hellip; Và khi chúng liên kết lại với nhau thì chúng lại tạo ra một kết nối khổng lồ, đó là Internet!\nTới đây chắc bạn đã hiểu cơ bản nó là gì rồi, nhưng để nắm bắt các khái niệm thì bạn phải tiếp tục xem các blog khác, hoặc tự mình tra cứu các bài viết tương tự hoặc xem video về \u0026ldquo;Lập trình mạng\u0026rdquo;.\n🐴 Tại website này có một số bài viết khác tương tự, bạn chọn thẻ giống bài viết này để dễ lọc ra nhé!\n💡 Bài tiếp theo mà bạn nên xem: Lập Trình Mạng là gì?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/hello-world/","section":"posts","tags":["Cơ bản","Giới thiệu"],"title":"Hello World - Giới thiệu"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/l%E1%BA%ADp-tr%C3%ACnh-m%E1%BA%A1ng/","section":"categories","tags":null,"title":"Lập Trình Mạng"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/","section":"","tags":null,"title":"ThaoBlog"},{"body":" Xin chào, đây là trang giới thiệu về mình 🐴. Mình là Lê Quang Thảo, một sinh viên thuộc trường Đại học công nghệ Sài Gòn (HUTECH) Cơ sở chính mà mình đang học là tại Thủ Đức. Để mà nói thì mình cũng chịu khó học, nhưng không giỏi, cũng không quá siêng năng nhưng luôn làm mọi thứ vừa sức và vừa lòng mọi người để tránh bốc trúng sít rịt :D Có thể bạn nghĩ mình hơi nghiêm túc quá, đó là do chúng ta chưa đủ thân! Vì thế đừng nghĩ nữa, mà hãy nghỉ ngơi, ăn đủ ngủ đủ, vui chơi vừa phải, biết đâu có gì đó sẽ xảy ra thì sao? Với những thông tin cơ bản bên trên chắc bạn cũng đoán được phần nào rằng mình là người thế nào rồi nhỉ? ~Thôi thì coi như là hiểu nhau rồi và bấm next sang trang khác để tiếp tục nha!\nA reminder: Always work hard, but keep it safe and play it cool, don\u0026rsquo;t touch the hot pot. ","link":"https://thaoprovt1.github.io/ThaoBlog/about/","section":"","tags":null,"title":"Giới thiệu bản thân"},{"body":"Nghe “lập trình mạng” thì nhiều người sẽ nghĩ ngay tới hacker, ddos, server game hay mấy dòng lệnh đen thui gì gì đó trên màn hình. Nhưng thật ra lập trình mạng chỉ đơn giản là việc lập trình có liên quan đến giao tiếp giữa các máy tính qua mạng và việc lựa chọn ngôn ngữ lập trình phù hợp với bản thân.\nĐối với mạng, có 4 loại mạng cơ bản là: LAN, MAN, WAN, PAN. Mạng LAN (Local Area Network) Mạng LAN là mạng cục bộ nên có đường truyền ngắn. Với giao thức TCP/IP, mạng LAN chủ yếu được sử dụng tại nơi diện tích nhỏ như: văn phòng, tòa nhà, trường học.\nTất cả máy tính kết nối mạng LAN đều được sử dụng để kết nối vào máy chủ sau đó chờ quyền truy cập để thực hiện lệnh in trên máy in.\nMạng MAN (Metropolitan Area Network) Khác với mạng LAN, mạng đô thị MAN có phạm vị kết nối rộng hơn, hình thành nhờ sự kết nối nhiều mạng LAN với nhau.\nĐây là mô hình rộng cung cấp \u0026ldquo;dịch vụ giá trị gia tăng\u0026rdquo;; trên một đường truyền tốc độ nhanh để kết nối và mở rộng triển khai các doanh nghiệp với nhau.\nMạng WAN (Wide Area Network) Mạng diện rộng WAN là sự kết hợp giữa mạng LAN và mạng MAN với việc sử dụng đường dây cáp quang hay thuê bao hoặc thông qua đường truyền vệ tinh.\nPhạm vi hoạt động của mạng rộng lớn hơn, bao gồm cả một quốc gia, khu vực địa lý hay thậm chí ở toàn cầu.\nMạng PAN (Personal Area Network) Mạng PAN có khả năng phát tín hiệu kết nối trong một diện tích nhỏ để truyền dữ liệu thông qua mạng trực tuyến.\nCá nhân có thể sử dụng mạng PAN giữa các thiết bị với nhau như di động. máy tính. để liên lạc thuận lợi hơn hoặc kết nối với các mạng cao cấp hơn.\nLập trình mạng là gì? Lập trình mạng nói một cách dễ hiểu là công việc của người sẽ phát triển ứng dụng tại hệ thống doanh nghiệp từ việc lập sổ sách nhân sự, quản lý tiền cho đến việc sáng tạo các trò chơi, điều khiển để tăng sức hấp dẫn thu hút khách hàng hơn.\nCông thức để xây dựng lập trình mạng như sau:\nLập trình mạng = Kiến thức mạng + Mô hình lập trình mạng + Ngôn ngữ lập trình mạng Theo công thức này thì sẽ rất dễ nhận thấy ba vấn đề chính cần quan tâm là kiến thức mạng truyền thông, mô hình lập trình và ngôn ngữ lập trình.\nVề kiến thức mạng truyền thông thì đây là kiến thức chung về mạng di động: mạng Bluetooth, hệ thống GPS, mạng Sensor… mà người làm quản trị cần nắm vững cách sử dụng để khai thác.\nMô hình lập trình là kiến thức về tất cả các cách xây dựng hệ thống mạng, kiến thức về cơ sở dữ liệu, mô hình xây dựng các chương trình ứng dụng mạng.\nVí dụ về một số ít ngôn ngữ lập trình được ưa chuộng bởi các Dev:\nC/C++ → Dùng để viết các ứng dụng mạng ở cấp độ thấp (low-level) thân thuộc và cổ điển, ví dụ như client–server, proxy, hoặc thậm chí là giao thức mạng riêng (chi tiết thì bạn có thể tra wiki hoặc hỏi AI nhé tại vì mình cũng tham khảo thông tin từ mạng là chính 🐴).\nPython → dễ học, với nhiều thư viện hỗ trợ như socket, asyncio, requests, flask, vân vân và mây mây. Thường dùng để viết server nhanh, test API, hoặc phân tích dữ liệu mạng (cái này dễ dùng, thân thiện cho người mới học lập trình).\nVà với Java ta có thể: - Viết chat app giữa hai máy - Tạo web server nhỏ dùng socket - Làm ứng dụng client-server kiểu gửi file\u0026hellip;\nJava nổi tiếng là một ngôn ngữ mạnh mẽ và ổn định, rất phù hợp cho các ứng dụng mạng lớn. Nếu bạn muốn làm việc với mô hình client-server hoặc các kết nối TCP/IP, Java cung cấp sẵn các thư viện như java.net để xử lý.\nNgoài ra, nếu chuyển sang JavaScript (khi chạy bằng Node.js) còn cho phép ta thực hiện các tác vụ mạng ở mức gần như là “thời gian thực” (real-time) với độ trễ cực thấp, nhờ vào cơ chế bất đồng bộ (asynchronous) và event loop — thứ giúp chương trình không bị “đơ” khi chờ dữ liệu phản hồi.\nNgoài ra còn có một số ngôn ngữ lập trình khác như: .NET, Delphi,\u0026hellip;\nCó thể nói, mỗi ngôn ngữ lập trình đều có sự đặc biệt và đặc điểm riêng của chúng, nhưng để thực sự hiểu thì vẫn phải có sự rèn giũa lâu dài và cố gắn không ngừng nghỉ.\nNói ngắn gọn: Lập trình mạng = Giao tiếp qua Internet bằng code. Với mỗi ngôn ngữ lập trình là một sự giao tiếp đặc biệt riêng với máy.\nTa có ví dụ TCP Socket đơn giản sau (chạy bằng Netbeans): Code:\n//Server.js public class Server { public static void main(String[] args) { try { ServerSocket server = new ServerSocket(5000); System.out.println(\u0026#34;✅ Server đang chạy ở cổng 5000...\u0026#34;); Socket socket = server.accept(); System.out.println(\u0026#34;🟢 Client đã kết nối: \u0026#34; + socket.getInetAddress()); BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); String message; while (true) { // Nhận tin nhắn từ client if ((message = input.readLine()) != null) { System.out.println(\u0026#34;💭 Client: \u0026#34; + message); } // Gửi tin nhắn từ bàn phím System.out.print(\u0026#34;Bạn: \u0026#34;); String send = keyboard.readLine(); output.println(send); } } catch (IOException e) { e.printStackTrace(); } } } //Client.js public class Client { public static void main(String[] args) { try { // Đổi IP (127.0.0.1) này thành IP của máy \u0026#34;Server\u0026#34; trong mạng LAN Socket socket = new Socket(\u0026#34;127.0.0.1\u0026#34;, 5000); System.out.println(\u0026#34;✅ Đã kết nối tới server!\u0026#34;); BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); String message; while (true) { // Gửi tin nhắn System.out.print(\u0026#34;Bạn: \u0026#34;); String send = keyboard.readLine(); output.println(send); // Nhận tin nhắn từ server if ((message = input.readLine()) != null) { System.out.println(\u0026#34;💭 Server: \u0026#34; + message); } } } catch (IOException e) { e.printStackTrace(); } } } Và đó, chính là \u0026ldquo;Lập trình mạng máy tính\u0026rdquo;, một cách để các \u0026ldquo;máy\u0026rdquo; giao tiếp với nhau!\nLưu ý: Code trên chỉ là code nhỏ để làm mẫu, không có tính thực dụng, không nên dùng trong các công việc quan trọng.\n💡 Bài viết khác nên xem: Học lập trình mạng cần gì?.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/laptrinhmanglagi/","section":"posts","tags":["Networking","Cơ bản"],"title":"Lập trình mạng là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/networking/","section":"tags","tags":null,"title":"Networking"},{"body":"Bạn cần chia sẻ nhanh các file trong mạng nội bộ? Hay bạn là một lập trình viên web cần một cách siêu tốc để kiểm thử giao diện HTML, CSS, JavaScript của mình? Đừng vội nghĩ đến những thiết lập phức tạp hay những chương trình lớn. Với Python được cài đặt sẵn trên máy, bạn có thể khởi tạo một máy chủ web (web server) chỉ trong vài phút ngắn ngủi!.\nHãy cùng khám phá module http.server có sẵn của Python nhé!\nServer này làm được gì?\nServer đơn giản này chủ yếu dùng để phục vụ các file tĩnh. Điều này có nghĩa là bạn có thể:\nTruy cập và tải xuống bất kỳ file nào trong thư mục mà server được khởi chạy. Xem trước các trang web (HTML, CSS, JS) trực tiếp trên trình duyệt. Chia sẻ tài liệu, hình ảnh cho các máy tính khác trong cùng một mạng LAN. import socket server = socket.socket() server.bind((\u0026#39;localhost\u0026#39;, 8080)) server.listen(1) print(\u0026#34;Server đang chạy...\u0026#34;) conn, addr = server.accept() print(f\u0026#34;Kết nối từ {addr}\u0026#34;) data = conn.recv(1024) print(\u0026#34;Nhận:\u0026#34;, data.decode()) conn.send(b\u0026#34;Hello client!\u0026#34;) conn.close() Chạy xong, mở terminal khác gửi telnet localhost 8080 là thấy nó phản hồi liền !\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taoserverpython/","section":"posts","tags":["Python","Socket"],"title":"Cách tạo server đơn giản bằng Python"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/c%E1%BA%A3m-nh%E1%BA%ADn/","section":"tags","tags":null,"title":"Cảm Nhận"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/debug/","section":"tags","tags":null,"title":"Debug"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/%C4%91%E1%BB%8Bnh-h%C6%B0%E1%BB%9Bng-ngh%E1%BB%81-nghi%E1%BB%87p/","section":"categories","tags":null,"title":"Định Hướng Nghề Nghiệp"},{"body":"Nhiều bạn khi mới bắt đầu học lập trình mạng hoặc chỉ mới bắt đầu lập trình thường sẽ nghĩ “học lập trình nên bắt đầu bằng gì?” hay \u0026ldquo;nên học ngôn ngữ lập trình nào trước?\u0026rdquo;.\nThật ra ngôn ngữ nào cũng được, quan trọng là bạn hiểu được cách máy tính giao tiếp với nhau.\nNhưng dĩ nhiên là mình cũng không khuyến khích học cùng lúc nhiều ngôn ngữ hoặc cố lập trình và học tất cả các ngôn ngữ lập trình.\nThay vào đó bạn có thể học một số ngôn ngữ lập trình phổ biến sau:\nPython: Dễ học, có thư viện socket, requests. Cực kì khuyến khích, nếu bạn chỉ mới học lập trình và muốn tìm hướng đi sau này thì đây là một lựa chọn không tồi. C/C++: Mạnh mẽ, học sâu về tầng thấp. Khuyến khích khi bạn đã nắm được cơ bản về lập trình, hiểu được cách giao tiếp với máy qua các lệnh. Java: Nhiều framework hỗ trợ networking. Go: Hiệu năng cao, dùng nhiều cho server. Ngoài những hiểu biết về mạng và lập trình mạng cũng như ngôn ngữ lập trình. Hiện nay khi học lập trình, các con dân IT cũng thường sử dụng ngôn ngữ lập trình NET. Ngôn ngữ lập trình của NET là tập hợp các lớp dùng để lập trình online thuộc không gian System.net và System.net Socket. Các lớp này hỗ trợ tất cả mọi thứ từ lập trình đến tạo địa chỉ TCP/IP.\nMạng cục bộ LAN được các nhà lập trình tương lai xây dựng và phát triển các máy tính để kết nối tại các khu vực nhỏ như hộ gia đình hay toà nhà.\nNgoài ra lập trình mạng còn có dịch vụ web HTML, được thông qua từ HTTP. Hai không gian này đều có nền tảng hay networking cấp cao. Không chỉ vậy, lập trình mạng cũng cần tới nền Socket khi đây là giao diện trực tuyến, thông qua đó lập trình điều khiển 2 máy với nhau, gửi nhận dữ liệu giữa 2 máy.\nTham gia khóa học lập trình tại khoa Công nghệ thông tin của trường Đại học HUTECH với đa dạng các ngành và chuyên ngành! ","link":"https://thaoprovt1.github.io/ThaoBlog/posts/ngonngucanthiet/","section":"posts","tags":["Ngôn ngữ lập trình"],"title":"Học lập trình mạng cần gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/h%E1%BB%8Dc-t%E1%BA%ADp/","section":"categories","tags":null,"title":"Học Tập"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/h%E1%BB%8Dc-t%E1%BA%ADp/","section":"tags","tags":null,"title":"Học Tập"},{"body":"Một vài lỗi “kinh điển” ai học cũng gặp:\nSai địa chỉ IP hoặc port. Không đóng kết nối sau khi gửi xong. Quên encode/decode khi truyền chuỗi. Cố “send” dữ liệu khi server chưa sẵn sàng 😅 Giải pháp:\nIn log từng bước. Dùng Wireshark hoặc netcat để kiểm tra. Bình tĩnh, không hoảng 😤 ","link":"https://thaoprovt1.github.io/ThaoBlog/posts/loithuonggap/","section":"posts","tags":["Lỗi","Debug"],"title":"Khi lập trình mạng, lỗi hay gặp nhất là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/kinh-nghi%E1%BB%87m/","section":"tags","tags":null,"title":"Kinh Nghiệm"},{"body":"Thật ra, khó hay dễ còn tùy người 😅\nLập trình mạng không “khó” theo kiểu toán cao cấp, mà nó phức tạp vì có nhiều thứ phải hiểu cùng lúc:\nCách hoạt động của socket, IP, port. Giao thức như TCP, UDP, HTTP. Và đặc biệt: debug lỗi mạng khá mệt 🤯 Nhưng nếu bạn từng viết web, game online, hay ứng dụng chat, thì bạn đang làm lập trình mạng rồi đó!\nNó chỉ khó khi mình chưa thử thôi.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaolaikho/","section":"posts","tags":["Học tập","Cảm nhận"],"title":"Lập trình mạng có khó không? Tại sao?"},{"body":"Socket giống như “đường dây” giữa hai chương trình để gửi và nhận dữ liệu.\nVí dụ:\nClient (máy người dùng) gửi tin nhắn. Server nhận tin, xử lý, rồi phản hồi lại. Trong code, bạn chỉ cần:\nimport socket s = socket.socket() s.connect((\u0026#39;localhost\u0026#39;, 8080)) s.send(b\u0026#34;Hello server\u0026#34;) thế là đã ping đến máy khác được r đó :D\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/whatissocket/","section":"posts","tags":["Socket","Cơ bản"],"title":"Lập trình socket là gì?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/l%E1%BB%97i/","section":"tags","tags":null,"title":"Lỗi"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/ng%C3%B4n-ng%E1%BB%AF-l%E1%BA%ADp-tr%C3%ACnh/","section":"tags","tags":null,"title":"Ngôn Ngữ Lập Trình"},{"body":"Khi mới học, mình từng mắc mấy lỗi “ngớ ngẩn” sau 😅:\nCố học lý thuyết mà không thực hành. Không chịu đọc log khi lỗi. Copy code trên mạng mà không hiểu. Quên mất “mạng có độ trễ”! Học lập trình mạng phải test thực tế:\nChạy server, mở client, quan sát kết nối, xem log, phân tích.\nChỉ có thực hành mới hiểu được cách dữ liệu “chạy” qua mạng.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/sailamcuanguoimoihoclaptrinhmang/","section":"posts","tags":["Networking","Kinh nghiệm"],"title":"Những sai lầm khi mới học lập trình mạng"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/sinh-vi%C3%AAn/","section":"tags","tags":null,"title":"Sinh Viên"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/socket/","section":"tags","tags":null,"title":"Socket"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/tcp/","section":"tags","tags":null,"title":"TCP"},{"body":"\nGiao thức TCP (Tranmission Control Protocol) là gì? TCP là một giao thức mạng được dùng trong việc truyền gửi dữ liệu từ một mạng này đến một mạng khác. Một giao thức trong phạm vi mạng bao gồm những quy tắc và thứ tự quản lý quá trình truyền dữ liệu sao cho người dùng trên toàn cầu dù ở đâu, trên nền tảng gì, phần mềm nào cũng đều được phép thao tác theo cùng một phương thức tương tự nhau thì được gọi là TCP.\nCùng một phương thức giao tiếp = TCP\nThường thì TCP sẽ liên kết với giao thức Internet (Internet Protocal hay IP) tạo thành một cặp gọi là TCP/IP. Thuật ngữ này hay xuất hiện ở mục network setting trên máy tính hay các thiết bị di động cá nhân (Network Settings). IP có nhiệm vụ gán địa chỉ thực hiện đưa những gói tin từ nguồn đến đích, còn TCP xác thực tính tin cậy của truyền dẫn. Giao thức UDP (User Datagram Protocol) là gì? UDP được định nghĩa là giao thức dữ liệu người dùng, đây là giao thức giao tiếp thay thế cho giao thức mạng truyền dữ liệu TCP, UDP được áp dụng vào việc tùy chỉnh, cài đặt những kết nối có độ trễ thấp và không chịu lỗi giữa các ứng dụng ở môi trường internet.\nTCP và UDP đều dùng để gửi dữ liệu qua mạng, nhưng cách hoạt động thì khác nhau hoàn toàn.\nTCP UDP Có kết nối (connection) Không cần kết nối Đảm bảo dữ liệu đến nơi Không đảm bảo Gửi chậm hơn nhưng an toàn Gửi nhanh, không cần kiểm tra Dùng trong web, email Dùng trong game, stream, VoIP Tóm lại:\nCần chính xác → dùng TCP Cần tốc độ → dùng UDP ","link":"https://thaoprovt1.github.io/ThaoBlog/posts/tcpvaudplagi/","section":"posts","tags":["TCP","UDP"],"title":"TCP và UDP khác nhau như thế nào?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/categories/th%E1%BB%B1c-h%C3%A0nh/","section":"categories","tags":null,"title":"Thực Hành"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/tags/udp/","section":"tags","tags":null,"title":"UDP"},{"body":"Ai học lập trình rồi chắc đều từng bị cái này 😭\nChạy chương trình không báo lỗi, nhưng kết quả sai bét.\nNguyên nhân?\n=\u0026gt; Logic của mình sai.\n=\u0026gt; Mình hiểu sai yêu cầu.\n=\u0026gt; Hoặc “não mình lag tạm thời”.\nKinh nghiệm rút ra:\n“Code chạy được chưa chắc đúng. Hãy hiểu rõ vì sao nó chạy được.”\nĐó là lý do học lập trình không chỉ là “gõ code”, mà còn là rèn tư duy logic.\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaolaisai/","section":"posts","tags":["Lỗi","Debug"],"title":"Vấn đề muôn thuở: Code đúng, logic sai!"},{"body":"Học lập trình mạng giúp bạn hiểu cách Internet hoạt động — nền tảng cho mọi ứng dụng hiện nay.\nKhi hiểu rõ:\nCách request/response hoạt động. Cách dữ liệu truyền qua TCP/IP. Cách server xử lý client. Thì bạn làm web, game, IoT, cloud đều dễ hơn.\nVà quan trọng hơn:\nBạn sẽ không “sợ mạng”, mà biết cách tận dụng nó cho sản phẩm của mình 💪\n","link":"https://thaoprovt1.github.io/ThaoBlog/posts/taisaonenhoclaptrinhmangtusom/","section":"posts","tags":["Networking","Sinh viên"],"title":"Vì sao nên học lập trình mạng sớm?"},{"body":"","link":"https://thaoprovt1.github.io/ThaoBlog/posts/tongquanvejavascript/","section":"posts","tags":null,"title":""}]